package task

import (
	"os"
	"sync"
)

type TaskRepo struct {
	cfg   *TaskRepoConfig
	Tasks map[int]task
}

func NewTaskRepo(path string) (taskRepoPort, error) {
	repo := &TaskRepo{
		cfg: &TaskRepoConfig{
			path: path,
			mu:   &sync.RWMutex{},
		},
		Tasks: make(map[int]task),
	}

	return repo, nil
}

// add implements TaskRepoPort.
func (r *TaskRepo) add(desc string) (task, error) {
	// currTaskRepo, err := r.cfg.load()
	// if err != nil {
	// 	log.Println("here load")
	// 	return task{}, err
	// }

	newID := len(r.Tasks)
	newTask := task{
		ID:          newID,
		Status:      statusTodo,
		Description: desc,
		CreatedAt:   timeNow,
		UpdatedAt:   timeZero,
	}

	r.Tasks[newID] = newTask

	if err := r.cfg.write(r.Tasks); err != nil {
		return task{}, err
	}

	return newTask, nil
}

// delete implements TaskRepoPort.
func (r *TaskRepo) delete(id int) error {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return err
	}

	_, ok := currTaskRepo.Tasks[id]
	if !ok {
		return os.ErrNotExist
	}

	delete(currTaskRepo.Tasks, id)

	if err := r.cfg.write(currTaskRepo); err != nil {
		return err
	}

	return nil
}

// listAll implements TaskRepoPort.
func (r *TaskRepo) listAll() ([]task, error) {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return nil, err
	}

	var tasks []task
	for _, task := range currTaskRepo.Tasks {
		tasks = append(tasks, task)
	}

	return tasks, nil
}

// listByStatus implements TaskRepoPort.
func (r *TaskRepo) listByStatus(status string) ([]task, error) {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return nil, err
	}

	var tasks []task
	for _, task := range currTaskRepo.Tasks {
		if task.Status == status {
			tasks = append(tasks, task)
		}
	}

	return tasks, nil
}

// markDone implements TaskRepoPort.
func (r *TaskRepo) markDone(id int) error {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return err
	}

	task, ok := currTaskRepo.Tasks[id]
	if !ok {
		return os.ErrNotExist
	}

	task.Status = statusDone
	currTaskRepo.Tasks[id] = task

	if err := r.cfg.write(currTaskRepo); err != nil {
		return err
	}

	return nil
}

// markInProgress implements TaskRepoPort.
func (r *TaskRepo) markInProgress(id int) error {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return err
	}

	task, ok := currTaskRepo.Tasks[id]
	if !ok {
		return os.ErrNotExist
	}

	task.Status = statusInProgress
	currTaskRepo.Tasks[id] = task

	if err := r.cfg.write(currTaskRepo); err != nil {
		return err
	}

	return nil
}

// update implements TaskRepoPort.
func (r *TaskRepo) update(id int, desc string) error {
	currTaskRepo, err := r.cfg.load()
	if err != nil {
		return err
	}

	task, ok := currTaskRepo.Tasks[id]
	if !ok {
		return os.ErrNotExist
	}

	task.Description = desc
	currTaskRepo.Tasks[id] = task

	if err := r.cfg.write(currTaskRepo); err != nil {
		return err
	}

	return nil
}

var _ taskRepoPort = (*TaskRepo)(nil)
