package main

import (
	"errors"
	"fmt"
	"sort"
	"strconv"

	"github.com/fakhriaunur/task-cli/internal/database"
)

const (
	ArgumentNotEnough  = "not enough argument"
	ArgumentTooMany    = "too many arguments"
	ArgumentExpectOne  = "expect one argument"
	ArgumentExpectTwo  = "expect two arguments"
	ArgumentExpectZero = "expect no argument"
)

// could implement some helpers for n number of args of properties

func handlerAdd(s *stateManager, cmd command) error {
	args, err := fetchArgs(cmd, 1)
	if err != nil {
		return err
	}

	desc := args[0]

	task, err := s.DB.Add(desc)
	if err != nil {
		return err
	}

	printAdd(task)
	return nil
}

func printAdd(task database.Task) {
	fmt.Printf("Successfully created task with id=%d\n", task.ID)
}

func handlerUpdate(s *stateManager, cmd command) error {
	args, err := fetchArgs(cmd, 2)
	if err != nil {
		return err
	}

	id, err := strconv.Atoi(args[0])
	if err != nil {
		return err
	}

	desc := args[1]

	err = s.DB.Update(id, desc)
	if err != nil {
		return err
	}

	printUpdate(id)

	return nil
}

func printUpdate(id int) {
	fmt.Printf("Successfully updated task with ID=%d\n", id)
}

func handlerDelete(s *stateManager, cmd command) error {
	args, err := fetchArgs(cmd, 1)
	if err != nil {
		return err
	}

	id, err := strconv.Atoi(args[0])
	if err != nil {
		return err
	}

	err = s.DB.Delete(id)
	if err != nil {
		return err
	}

	printDelete(id)

	return nil
}

func printDelete(id int) {
	fmt.Printf("Successfully deleted task with ID=%d\n", id)
}

func handlerMarkInProgress(s *stateManager, cmd command) error {
	args, err := fetchArgs(cmd, 1)
	if err != nil {
		return err
	}

	id, err := strconv.Atoi(args[0])
	if err != nil {
		return err
	}

	err = s.DB.MarkInProgress(id)
	if err != nil {
		return err
	}

	printMarkInProgress(id)

	return nil
}

func printMarkInProgress(id int) {
	fmt.Printf("Successfully marked in-progress task with ID=%d\n", id)
}

func handlerMarkDone(s *stateManager, cmd command) error {
	args, err := fetchArgs(cmd, 1)
	if err != nil {
		return err
	}

	id, err := strconv.Atoi(args[0])
	if err != nil {
		return nil
	}

	err = s.DB.MarkDone(id)
	if err != nil {
		return err
	}

	printMarkDone(id)

	return nil
}

func printMarkDone(id int) {
	fmt.Printf("Successfully marked done task with ID=%d\n", id)
}

func handlerList(s *stateManager, cmd command) error {
	var tasks []database.Task
	var err error

	switch len(cmd.args) {
	case 0:
		tasks, err = s.DB.ListAll()

	case 1:
		args, err := fetchArgs(cmd, 1)
		if err != nil {
			return err
		}
		status := args[0]

		tasks, err = s.DB.ListByStatus(status)
		if err == nil && len(tasks) == 0 {
			fmt.Printf("No %s tasks currently\n", status)
		}
	default:
		return errors.New(ArgumentExpectZero + ArgumentExpectOne)
	}

	if err != nil {
		return err
	}

	sortList(tasks)
	printList(tasks)

	return nil
}

func sortList(tasks []database.Task) {
	sort.Slice(tasks, func(i, j int) bool {
		return tasks[i].ID < tasks[j].ID
	})
}

func printList(tasks []database.Task) {
	if len(tasks) == 0 {
		fmt.Println("No tasks currently")
	}

	for _, task := range tasks {
		fmt.Println(task.ID)
		fmt.Println(task.Description)
		fmt.Println(task.Status)
		fmt.Println(task.CreatedAt)
		fmt.Println(task.UpdatedAt)
	}
}

func handlerHelp(s *stateManager, cmd command) error {
	_, err := fetchArgs(cmd, 0)
	if err != nil {
		return err
	}

	printHelp()

	return nil
}

func printHelp() {
	fmt.Println("Usage: ")
	fmt.Println("add")
	fmt.Println("update <id> <desc>")
	fmt.Println("delete <id>")
	fmt.Println("mark-in-progress <id>")
	fmt.Println("mark-done <id>")
	fmt.Println("list")
	fmt.Println("list <status>")
	fmt.Println("help")
}

// TODO: helpers for argument fetching
func fetchArgs(cmd command, n int) ([]string, error) {
	args := cmd.args
	if len(args) > n {
		return nil, errors.New(ArgumentTooMany)
	}
	if len(args) < n {
		return nil, errors.New(ArgumentNotEnough)
	}

	return cmd.args, nil
}
